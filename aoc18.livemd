# AOC18 Explorations

## Module Code

```elixir
defmodule AOC18 do
  def neigbor_search_path(path, direction) do
    # First we walk the back and search for the first turn we can take in desired direction.
    Enum.reverse(path)
    |> Enum.drop_while(fn dir -> dir == direction end)
    |> case do
      [] -> nil
      [_head | tail] -> Enum.reverse([direction | tail])
    end
  end

  def increment_left_neighbor([a, b], path, increment) do
    case path do
      [:l | tail] -> [increment_left_neighbor(a, tail, increment), b]
      [:r | tail] -> [a, increment_left_neighbor(b, tail, increment)]
      [] -> [a, increment_left_neighbor(b, [], increment)]
      nil -> [a, b]
    end
  end

  def increment_left_neighbor(leaf, _path, increment) do
    leaf + increment
  end

  def increment_right_neighbor([a, b], path, increment) do
    # IO.inspect({[a, b], path}, label: "TRAVERSAL")

    case path do
      [:l | tail] -> [increment_right_neighbor(a, tail, increment), b]
      [:r | tail] -> [a, increment_right_neighbor(b, tail, increment)]
      [] -> [increment_right_neighbor(a, [], increment), b]
      nil -> [a, b]
    end
  end

  def increment_right_neighbor(leaf_value, _path, increment) do
    leaf_value + increment
  end

  def find_value_to_split(tree, path \\ [])

  def find_value_to_split([a, b], path) do
    left = find_value_to_split(a, [:l | path])
    if left, do: left, else: find_value_to_split(b, [:r | path])
  end

  def find_value_to_split(leaf_value, path) do
    if leaf_value > 9, do: {leaf_value, Enum.reverse(path)}, else: nil
  end

  def split_value([a, b], path) do
    case path do
      [:l | tail] -> [split_value(a, tail), b]
      [:r | tail] -> [a, split_value(b, tail)]
    end
  end

  def split_value(value, []) do
    [floor(value / 2), ceil(value / 2)]
  end

  def split(tree) do
    case find_value_to_split(tree) do
      nil ->
        nil

      {_value, path} ->
        # IO.inspect(path, label: "SPLITTING AT PATH")

        split_value(tree, path)
        # |> IO.inspect(charlists: :as_lists)
    end
  end

  def find_node_to_explode(tree_list, nesting \\ [])

  def find_node_to_explode([a, b], nesting) when is_integer(a) and is_integer(b) do
    if Enum.count(nesting) == 4, do: {[a, b], Enum.reverse(nesting)}, else: nil
  end

  def find_node_to_explode([a, b], nesting) when is_integer(a) do
    find_node_to_explode(b, [:r | nesting])
  end

  def find_node_to_explode([a, b], nesting) when is_integer(b) do
    find_node_to_explode(a, [:l | nesting])
  end

  def find_node_to_explode([a, b] = tree_list, nesting) when is_list(tree_list) do
    res = find_node_to_explode(a, [:l | nesting])
    if res, do: res, else: find_node_to_explode(b, [:r | nesting])
  end

  def zero_node(_node, []) do
    0
  end

  def zero_node([a, b], path) do
    case path do
      [:l | tail] -> [zero_node(a, tail), b]
      [:r | tail] -> [a, zero_node(b, tail)]
    end
  end

  def explode(tree) do
    case find_node_to_explode(tree) do
      nil ->
        nil

      {[a, b], path} ->
        # IO.inspect(path, label: "EXPLODING AT PATH")
        # |> IO.inspect(label: "LEFT NEIGHBOR")
        left = neigbor_search_path(path, :l)
        # |> IO.inspect(label: "LEFT INCREMENT")
        tree = increment_left_neighbor(tree, left, a)
        # |> IO.inspect(label: "RIGHT NEIGHBOR")
        right = neigbor_search_path(path, :r)
        # |> IO.inspect(label: "RIGHT INCREMENT")
        tree = increment_right_neighbor(tree, right, b)
        # |> IO.inspect(label: "AFTER ZERO")
        tree = zero_node(tree, path)
        tree
    end
  end

  def reduce_all(tree) do
    case explode(tree) do
      nil ->
        case split(tree) do
          nil -> tree
          new_tree -> reduce_all(new_tree)
        end

      new_tree ->
        reduce_all(new_tree)
    end
  end

  def add_numbers(numbers) do
    Enum.reduce(numbers, fn n, result ->
      IO.inspect(n, label: "ADDING NUMBER")

      [result, n]
      |> reduce_all()
    end)
  end

  def magnitude([a, b]), do: 3 * magnitude(a) + 2 * magnitude(b)
  def magnitude(leaf_value), do: leaf_value
end
```

## Neighbor Path

```elixir
path = [:l, :l, :l, :l]
IO.inspect(AOC18.neigbor_search_path(path, :l), label: "LEFT")
IO.inspect(AOC18.neigbor_search_path(path, :r), label: "RIGHT")
```

```elixir
path = [:r, :r, :r, :r]
IO.inspect(AOC18.neigbor_search_path(path, :l), label: "LEFT")
IO.inspect(AOC18.neigbor_search_path(path, :r), label: "RIGHT")
```

```elixir
path = [:r, :r, :r, :l]
IO.inspect(AOC18.neigbor_search_path(path, :l), label: "LEFT")
IO.inspect(AOC18.neigbor_search_path(path, :r), label: "RIGHT")
```

```elixir
path = [:r, :r, :l, :l]
IO.inspect(AOC18.neigbor_search_path(path, :l), label: "LEFT")
IO.inspect(AOC18.neigbor_search_path(path, :r), label: "RIGHT")
```

```elixir
path = [:r, :l, :r, :l]
IO.inspect(AOC18.neigbor_search_path(path, :l), label: "LEFT")
IO.inspect(AOC18.neigbor_search_path(path, :r), label: "RIGHT")
```

## Increment Neigbor

```elixir
tree = [[[[[1, 1], [2, 2]], [3, 3]], [4, 4]], [5, 5]]
path = [:l, :l, :l, :l]
search_path = AOC18.neigbor_search_path(path, :r) |> Enum.reverse()
IO.inspect(search_path)
AOC18.increment_right_neighbor(tree, search_path, 7)
```

```elixir
tree = [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]
path = [:r, :r, :r, :l]
search_path = AOC18.neigbor_search_path(path, :l) |> Enum.reverse()
IO.inspect(search_path)
tree = AOC18.increment_left_neighbor(tree, search_path, 7)

search_path = AOC18.neigbor_search_path(path, :r) |> Enum.reverse()
IO.inspect(search_path)
AOC18.increment_right_neighbor(tree, search_path, 3)
```

## Value Splitting

```elixir
tree = [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]
path = [:l, :l]
AOC18.split_value(tree, path)
```

```elixir
tree = [1, [3, [5, [[20, 33], 7]]]]
path = AOC18.find_value_to_split(tree)
IO.inspect(path)
AOC18.split_value(tree, elem(path, 1))
```

```elixir
tree = [1, [3, [5, [[1, 2], 7]]]]
path = AOC18.find_value_to_split(tree)
IO.inspect(path)
```

```elixir
[1, [3, [5, [[20, 33], 7]]]]
|> AOC18.split()
|> AOC18.split()
|> AOC18.split()
|> AOC18.split()
|> AOC18.split()
|> AOC18.split()
|> AOC18.split()
```

```elixir
[1, [3, [5, [[20, 33], 7]]]]
|> AOC18.split_all()
```

## Zero Node

```elixir
tree = [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]
path = [:l, :r, :r, :r]
tree = AOC18.zero_node(tree, path) |> IO.inspect()
path = [:r, :r, :r, :r]
tree = AOC18.zero_node(tree, path) |> IO.inspect()
```

## Find Node to Explode

```elixir
tree = [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]
{[a, b], path} = AOC18.find_node_to_explode(tree) |> IO.inspect(label: "EXPLODE PATH")
left = AOC18.neigbor_search_path(path, :l) |> IO.inspect(label: "LEFT NEIGHBOR")
tree = AOC18.increment_left_neighbor(tree, left, a) |> IO.inspect(label: "LEFT INCREMENT")
right = AOC18.neigbor_search_path(path, :r) |> IO.inspect(label: "RIGHT NEIGHBOR")
tree = AOC18.increment_right_neighbor(tree, right, b) |> IO.inspect(label: "RIGHT INCREMENT")
tree = AOC18.zero_node(tree, path) |> IO.inspect() |> IO.inspect(label: "AFTER ZERO")

{[a, b], path} = AOC18.find_node_to_explode(tree) |> IO.inspect(label: "EXPLODE PATH")
left = AOC18.neigbor_search_path(path, :l) |> IO.inspect(label: "LEFT NEIGHBOR")
tree = AOC18.increment_left_neighbor(tree, left, a) |> IO.inspect(label: "LEFT INCREMENT")
right = AOC18.neigbor_search_path(path, :r) |> IO.inspect(label: "RIGHT NEIGHBOR")
tree = AOC18.increment_right_neighbor(tree, right, b) |> IO.inspect(label: "RIGHT INCREMENT")
tree = AOC18.zero_node(tree, path) |> IO.inspect()

path = AOC18.find_node_to_explode(tree)
```

## Explode

```elixir
tree = [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]
tree = AOC18.explode(tree)
tree = AOC18.explode(tree)
tree = AOC18.explode(tree)
```

## Reduce All

```elixir
tree = [[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]
AOC18.reduce_all(tree)
```

```elixir
tree = [[[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]]
IO.inspect(tree, label: "INPUT TREE")
IO.inspect(AOC18.reduce_all(tree), label: "RESULT")
```

## Adding Numbers

```elixir
numbers = [[1, 1], [2, 2], [3, 3], [4, 4]]
AOC18.add_numbers(numbers)
```

```elixir
numbers = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]
AOC18.add_numbers(numbers)
```

```elixir
numbers = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]
AOC18.add_numbers(numbers)
```

```elixir
numbers = [
  [[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]],
  [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]],
  [[2, [[0, 8], [3, 4]]], [[[6, 7], 1], [7, [1, 6]]]],
  [[[[2, 4], 7], [6, [0, 5]]], [[[6, 8], [2, 8]], [[2, 1], [4, 5]]]],
  [7, [5, [[3, 8], [1, 4]]]],
  [[2, [2, 2]], [8, [8, 1]]],
  [2, 9],
  [1, [[[9, 3], 9], [[9, 0], [0, 7]]]],
  [[[5, [7, 4]], 7], 1],
  [[[[4, 2], 2], 6], [8, 7]]
]

IO.inspect(AOC18.add_numbers(numbers))
```

## Magnitude

```elixir
number = [[1, 2], [[3, 4], 5]]
IO.puts(AOC18.magnitude(number))

number = [[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]]
IO.puts(AOC18.magnitude(number))

number = [[[[1, 1], [2, 2]], [3, 3]], [4, 4]]
IO.puts(AOC18.magnitude(number))

number = [[[[3, 0], [5, 3]], [4, 4]], [5, 5]]
IO.puts(AOC18.magnitude(number))

number = [[[[5, 0], [7, 4]], [5, 5]], [6, 6]]
IO.puts(AOC18.magnitude(number))

number = [[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]]
IO.puts(AOC18.magnitude(number))

number = [[[[6, 6], [7, 6]], [[7, 7], [7, 0]]], [[[7, 7], [7, 7]], [[7, 8], [9, 9]]]]
IO.puts(AOC18.magnitude(number))
```

```elixir
numbers = [
  [[[0, [5, 8]], [[1, 7], [9, 6]]], [[4, [1, 2]], [[1, 4], 2]]],
  [[[5, [2, 8]], 4], [5, [[9, 9], 0]]],
  [6, [[[6, 2], [5, 6]], [[7, 6], [4, 7]]]],
  [[[6, [0, 7]], [0, 9]], [4, [9, [9, 0]]]],
  [[[7, [6, 4]], [3, [1, 3]]], [[[5, 5], 1], 9]],
  [[6, [[7, 3], [3, 2]]], [[[3, 8], [5, 7]], 4]],
  [[[[5, 4], [7, 7]], 8], [[8, 3], 8]],
  [[9, 3], [[9, 9], [6, [4, 9]]]],
  [[2, [[7, 7], 7]], [[5, 8], [[9, 3], [0, 2]]]],
  [[[[5, 2], 5], [8, [3, 7]]], [[5, [7, 5]], [4, 4]]]
]

result = AOC18.add_numbers(numbers) |> IO.inspect()
IO.puts(AOC18.magnitude(result))
```

```elixir
numbers = [
  [[6, [[9, 4], [5, 5]]], [[[0, 7], [7, 8]], [7, 0]]],
  [[[[2, 1], [8, 6]], [2, [4, 0]]], [9, [4, [0, 6]]]],
  [[[[4, 2], [7, 7]], 4], [3, 5]],
  [8, [3, [[2, 3], 5]]],
  [[[[0, 0], [4, 7]], [[5, 5], [8, 5]]], [8, 0]],
  [[[[5, 2], [5, 7]], [1, [5, 3]]], [[4, [8, 4]], 2]],
  [[5, [[2, 8], [9, 3]]], [[7, [5, 2]], [[9, 0], [5, 2]]]],
  [[9, [[4, 3], 1]], [[[9, 0], [5, 8]], [[2, 6], 1]]],
  [[0, 6], [6, [[6, 4], [7, 0]]]],
  [[[9, [4, 2]], [[6, 0], [8, 9]]], [[0, 4], [3, [6, 8]]]],
  [[[[3, 2], 0], [[9, 6], [3, 1]]], [[[3, 6], [7, 6]], [2, [6, 4]]]],
  [5, [[[1, 6], [7, 8]], [[6, 1], [3, 0]]]],
  [2, [[6, [7, 6]], [[8, 6], 3]]],
  [[[[0, 9], 1], [2, 3]], [[[7, 9], 1], 7]],
  [[[[1, 8], 3], [[8, 8], [0, 8]]], [[2, 1], [8, 0]]],
  [[2, 9], [[5, 1], [[9, 3], [4, 0]]]],
  [9, [8, 4]],
  [[[3, 3], [[6, 2], 8]], 5],
  [[[9, [4, 8]], [[1, 3], [6, 7]]], [9, [[4, 4], 2]]],
  [[[[1, 3], 6], [[5, 6], [1, 9]]], [9, [[0, 2], 9]]],
  [7, [[[0, 6], [1, 2]], 4]],
  [[[[5, 0], [8, 7]], [[7, 3], 0]], [[6, 7], [0, 1]]],
  [[[[5, 4], 7], [[8, 2], 1]], [[[7, 0], [6, 9]], 0]],
  [[[3, [5, 6]], [[9, 5], 4]], [[[9, 4], [8, 1]], [5, [7, 4]]]],
  [[[3, [7, 5]], [[8, 1], 8]], [[[6, 3], [9, 2]], [[5, 7], 7]]],
  [8, [[2, 0], [[2, 6], 8]]],
  [[[[5, 8], 9], 1], [9, 6]],
  [[[9, 9], [8, 8]], [[[3, 5], [8, 0]], [[4, 6], [3, 2]]]],
  [[5, [[5, 1], 6]], [[5, 8], 9]],
  [[7, [[1, 6], 6]], [[[8, 6], 7], [6, 6]]],
  [[0, [[9, 5], 0]], [4, [[7, 9], [4, 9]]]],
  [[[[4, 3], [3, 5]], [[1, 9], [7, 6]]], [3, [[6, 4], [6, 0]]]],
  [[[2, 6], 6], [6, 3]],
  [[[[1, 5], [3, 7]], 0], [3, 7]],
  [4, [[[5, 5], 4], [[5, 5], [9, 3]]]],
  [[3, [8, 6]], [8, [7, 7]]],
  [8, [9, 5]],
  [[[6, 3], [2, [3, 6]]], [[[6, 0], [0, 2]], [[8, 7], 5]]],
  [[[8, [1, 2]], 2], 7],
  [[[[8, 4], [2, 7]], [[3, 9], 7]], [[4, [8, 8]], [[7, 4], 9]]],
  [[[8, [2, 5]], [3, [1, 2]]], [[4, [5, 0]], 3]],
  [[8, [0, 3]], [[5, 1], [1, 1]]],
  [[[8, [3, 6]], 6], [[7, [1, 5]], [[4, 8], 9]]],
  [[[5, 0], [0, 3]], [[2, [7, 8]], [1, [4, 8]]]],
  [9, [4, [9, 4]]],
  [[[9, [0, 4]], 2], 3],
  [[9, [7, [8, 9]]], 3],
  [[[8, 6], [[3, 5], [9, 2]]], [[3, [9, 7]], 5]],
  [[6, [[7, 4], 2]], [2, [7, [6, 0]]]],
  [1, [[[2, 2], 6], 8]],
  [[[6, [1, 8]], [[9, 3], [1, 8]]], [[[8, 2], [9, 3]], [[8, 2], [9, 9]]]],
  [[[[2, 9], [1, 7]], [[4, 0], 8]], [[8, 9], [6, 3]]],
  [[[[2, 4], [6, 1]], [[5, 4], [2, 8]]], [8, [1, [2, 4]]]],
  [[[4, 6], [1, 6]], [3, [1, 1]]],
  [[[[8, 3], 8], 8], [1, [[4, 2], 3]]],
  [[[9, [8, 7]], [5, 9]], [8, [[5, 6], [4, 5]]]],
  [[[[4, 1], 2], [[7, 8], 4]], [0, 6]],
  [[[9, 7], [[8, 6], [6, 9]]], [[8, [8, 4]], [[9, 0], 2]]],
  [[[8, 5], [1, 9]], [[[2, 4], 5], 6]],
  [[[9, [9, 3]], [9, [2, 3]]], [7, 7]],
  [[[8, [7, 4]], [2, 6]], [[[4, 5], [9, 9]], [0, [5, 2]]]],
  [7, [2, 2]],
  [[[[1, 8], [5, 2]], 3], [0, [2, [4, 5]]]],
  [[5, [[4, 8], [5, 5]]], [4, [[3, 4], [6, 0]]]],
  [[3, 1], [4, [3, [8, 2]]]],
  [[3, 7], [3, [[6, 1], [0, 2]]]],
  [[4, [6, 2]], [[3, 9], 8]],
  [[[[2, 9], 3], [[5, 6], 4]], [8, 2]],
  [[4, [[7, 9], [4, 9]]], [[4, 3], [7, [0, 7]]]],
  [[[3, [8, 9]], [[3, 4], [9, 5]]], 3],
  [0, [[[3, 0], [8, 7]], [[0, 9], [9, 1]]]],
  [[[5, [9, 9]], 2], [4, 8]],
  [[[[4, 4], 4], 5], [3, 4]],
  [[[3, [2, 2]], 7], [[3, 2], 0]],
  [[[[0, 5], [5, 2]], 2], [2, [[1, 2], 2]]],
  [[[4, 6], 6], [[0, 1], 6]],
  [2, [[[3, 9], 7], [[9, 8], 8]]],
  [[7, 9], [7, [[3, 0], 9]]],
  [[[1, [6, 2]], [0, 8]], [[[7, 2], 4], 9]],
  [[[[4, 7], [1, 5]], [5, 9]], [[2, [0, 4]], [7, [7, 0]]]],
  [[1, [[2, 0], [0, 4]]], [[[4, 6], 9], [[6, 8], [0, 1]]]],
  [[[[6, 0], 7], [7, [9, 6]]], [[7, [4, 9]], [9, 4]]],
  [[[5, [4, 6]], [[1, 9], [5, 8]]], [[[3, 6], [2, 6]], [[7, 3], 7]]],
  [[[6, 0], [6, 6]], [2, 8]],
  [[[4, [7, 2]], [[5, 6], [2, 4]]], [[[6, 8], 5], [4, 6]]],
  [[[[9, 0], 9], [4, 0]], [[[9, 1], 8], [6, 4]]],
  [[6, 3], [1, [[5, 0], [9, 9]]]],
  [[[2, 7], [5, 6]], [[6, [1, 4]], [9, 9]]],
  [[[[0, 5], 3], [8, 7]], [[[9, 9], [6, 2]], [0, 7]]],
  [[[5, 6], [1, 7]], [[[0, 4], 9], 9]],
  [[[7, 3], 3], [6, [0, [8, 9]]]],
  [[[0, 6], [[8, 5], [4, 6]]], [[[2, 7], [4, 2]], [[8, 7], [0, 5]]]],
  [[[8, [7, 3]], 1], 8],
  [[8, [8, [8, 2]]], [[5, 4], [1, [2, 6]]]],
  [[[[1, 1], [8, 6]], 5], 9],
  [[[[2, 4], [5, 7]], [[5, 8], [3, 1]]], 7],
  [[4, [[0, 1], 9]], [[3, 8], [4, 2]]],
  [3, 2],
  [[3, 4], [8, [[6, 5], [6, 6]]]],
  [[[[7, 0], [3, 8]], [[3, 3], [2, 6]]], [[8, 0], 9]]
]

result = AOC18.add_numbers(numbers) |> IO.inspect()
AOC18.magnitude(result)
```

## Part 2

```elixir
numbers = [
  [[[0, [5, 8]], [[1, 7], [9, 6]]], [[4, [1, 2]], [[1, 4], 2]]],
  [[[5, [2, 8]], 4], [5, [[9, 9], 0]]],
  [6, [[[6, 2], [5, 6]], [[7, 6], [4, 7]]]],
  [[[6, [0, 7]], [0, 9]], [4, [9, [9, 0]]]],
  [[[7, [6, 4]], [3, [1, 3]]], [[[5, 5], 1], 9]],
  [[6, [[7, 3], [3, 2]]], [[[3, 8], [5, 7]], 4]],
  [[[[5, 4], [7, 7]], 8], [[8, 3], 8]],
  [[9, 3], [[9, 9], [6, [4, 9]]]],
  [[2, [[7, 7], 7]], [[5, 8], [[9, 3], [0, 2]]]],
  [[[[5, 2], 5], [8, [3, 7]]], [[5, [7, 5]], [4, 4]]]
]

permutations = for x <- numbers, y <- numbers, do: [x, y]

Enum.flat_map(permutations, fn [a, b] ->
  [AOC18.reduce_all([a, b]) |> AOC18.magnitude(), AOC18.reduce_all([b, a]) |> AOC18.magnitude()]
end)
|> Enum.max()
```

```elixir
numbers = [
  [[6, [[9, 4], [5, 5]]], [[[0, 7], [7, 8]], [7, 0]]],
  [[[[2, 1], [8, 6]], [2, [4, 0]]], [9, [4, [0, 6]]]],
  [[[[4, 2], [7, 7]], 4], [3, 5]],
  [8, [3, [[2, 3], 5]]],
  [[[[0, 0], [4, 7]], [[5, 5], [8, 5]]], [8, 0]],
  [[[[5, 2], [5, 7]], [1, [5, 3]]], [[4, [8, 4]], 2]],
  [[5, [[2, 8], [9, 3]]], [[7, [5, 2]], [[9, 0], [5, 2]]]],
  [[9, [[4, 3], 1]], [[[9, 0], [5, 8]], [[2, 6], 1]]],
  [[0, 6], [6, [[6, 4], [7, 0]]]],
  [[[9, [4, 2]], [[6, 0], [8, 9]]], [[0, 4], [3, [6, 8]]]],
  [[[[3, 2], 0], [[9, 6], [3, 1]]], [[[3, 6], [7, 6]], [2, [6, 4]]]],
  [5, [[[1, 6], [7, 8]], [[6, 1], [3, 0]]]],
  [2, [[6, [7, 6]], [[8, 6], 3]]],
  [[[[0, 9], 1], [2, 3]], [[[7, 9], 1], 7]],
  [[[[1, 8], 3], [[8, 8], [0, 8]]], [[2, 1], [8, 0]]],
  [[2, 9], [[5, 1], [[9, 3], [4, 0]]]],
  [9, [8, 4]],
  [[[3, 3], [[6, 2], 8]], 5],
  [[[9, [4, 8]], [[1, 3], [6, 7]]], [9, [[4, 4], 2]]],
  [[[[1, 3], 6], [[5, 6], [1, 9]]], [9, [[0, 2], 9]]],
  [7, [[[0, 6], [1, 2]], 4]],
  [[[[5, 0], [8, 7]], [[7, 3], 0]], [[6, 7], [0, 1]]],
  [[[[5, 4], 7], [[8, 2], 1]], [[[7, 0], [6, 9]], 0]],
  [[[3, [5, 6]], [[9, 5], 4]], [[[9, 4], [8, 1]], [5, [7, 4]]]],
  [[[3, [7, 5]], [[8, 1], 8]], [[[6, 3], [9, 2]], [[5, 7], 7]]],
  [8, [[2, 0], [[2, 6], 8]]],
  [[[[5, 8], 9], 1], [9, 6]],
  [[[9, 9], [8, 8]], [[[3, 5], [8, 0]], [[4, 6], [3, 2]]]],
  [[5, [[5, 1], 6]], [[5, 8], 9]],
  [[7, [[1, 6], 6]], [[[8, 6], 7], [6, 6]]],
  [[0, [[9, 5], 0]], [4, [[7, 9], [4, 9]]]],
  [[[[4, 3], [3, 5]], [[1, 9], [7, 6]]], [3, [[6, 4], [6, 0]]]],
  [[[2, 6], 6], [6, 3]],
  [[[[1, 5], [3, 7]], 0], [3, 7]],
  [4, [[[5, 5], 4], [[5, 5], [9, 3]]]],
  [[3, [8, 6]], [8, [7, 7]]],
  [8, [9, 5]],
  [[[6, 3], [2, [3, 6]]], [[[6, 0], [0, 2]], [[8, 7], 5]]],
  [[[8, [1, 2]], 2], 7],
  [[[[8, 4], [2, 7]], [[3, 9], 7]], [[4, [8, 8]], [[7, 4], 9]]],
  [[[8, [2, 5]], [3, [1, 2]]], [[4, [5, 0]], 3]],
  [[8, [0, 3]], [[5, 1], [1, 1]]],
  [[[8, [3, 6]], 6], [[7, [1, 5]], [[4, 8], 9]]],
  [[[5, 0], [0, 3]], [[2, [7, 8]], [1, [4, 8]]]],
  [9, [4, [9, 4]]],
  [[[9, [0, 4]], 2], 3],
  [[9, [7, [8, 9]]], 3],
  [[[8, 6], [[3, 5], [9, 2]]], [[3, [9, 7]], 5]],
  [[6, [[7, 4], 2]], [2, [7, [6, 0]]]],
  [1, [[[2, 2], 6], 8]],
  [[[6, [1, 8]], [[9, 3], [1, 8]]], [[[8, 2], [9, 3]], [[8, 2], [9, 9]]]],
  [[[[2, 9], [1, 7]], [[4, 0], 8]], [[8, 9], [6, 3]]],
  [[[[2, 4], [6, 1]], [[5, 4], [2, 8]]], [8, [1, [2, 4]]]],
  [[[4, 6], [1, 6]], [3, [1, 1]]],
  [[[[8, 3], 8], 8], [1, [[4, 2], 3]]],
  [[[9, [8, 7]], [5, 9]], [8, [[5, 6], [4, 5]]]],
  [[[[4, 1], 2], [[7, 8], 4]], [0, 6]],
  [[[9, 7], [[8, 6], [6, 9]]], [[8, [8, 4]], [[9, 0], 2]]],
  [[[8, 5], [1, 9]], [[[2, 4], 5], 6]],
  [[[9, [9, 3]], [9, [2, 3]]], [7, 7]],
  [[[8, [7, 4]], [2, 6]], [[[4, 5], [9, 9]], [0, [5, 2]]]],
  [7, [2, 2]],
  [[[[1, 8], [5, 2]], 3], [0, [2, [4, 5]]]],
  [[5, [[4, 8], [5, 5]]], [4, [[3, 4], [6, 0]]]],
  [[3, 1], [4, [3, [8, 2]]]],
  [[3, 7], [3, [[6, 1], [0, 2]]]],
  [[4, [6, 2]], [[3, 9], 8]],
  [[[[2, 9], 3], [[5, 6], 4]], [8, 2]],
  [[4, [[7, 9], [4, 9]]], [[4, 3], [7, [0, 7]]]],
  [[[3, [8, 9]], [[3, 4], [9, 5]]], 3],
  [0, [[[3, 0], [8, 7]], [[0, 9], [9, 1]]]],
  [[[5, [9, 9]], 2], [4, 8]],
  [[[[4, 4], 4], 5], [3, 4]],
  [[[3, [2, 2]], 7], [[3, 2], 0]],
  [[[[0, 5], [5, 2]], 2], [2, [[1, 2], 2]]],
  [[[4, 6], 6], [[0, 1], 6]],
  [2, [[[3, 9], 7], [[9, 8], 8]]],
  [[7, 9], [7, [[3, 0], 9]]],
  [[[1, [6, 2]], [0, 8]], [[[7, 2], 4], 9]],
  [[[[4, 7], [1, 5]], [5, 9]], [[2, [0, 4]], [7, [7, 0]]]],
  [[1, [[2, 0], [0, 4]]], [[[4, 6], 9], [[6, 8], [0, 1]]]],
  [[[[6, 0], 7], [7, [9, 6]]], [[7, [4, 9]], [9, 4]]],
  [[[5, [4, 6]], [[1, 9], [5, 8]]], [[[3, 6], [2, 6]], [[7, 3], 7]]],
  [[[6, 0], [6, 6]], [2, 8]],
  [[[4, [7, 2]], [[5, 6], [2, 4]]], [[[6, 8], 5], [4, 6]]],
  [[[[9, 0], 9], [4, 0]], [[[9, 1], 8], [6, 4]]],
  [[6, 3], [1, [[5, 0], [9, 9]]]],
  [[[2, 7], [5, 6]], [[6, [1, 4]], [9, 9]]],
  [[[[0, 5], 3], [8, 7]], [[[9, 9], [6, 2]], [0, 7]]],
  [[[5, 6], [1, 7]], [[[0, 4], 9], 9]],
  [[[7, 3], 3], [6, [0, [8, 9]]]],
  [[[0, 6], [[8, 5], [4, 6]]], [[[2, 7], [4, 2]], [[8, 7], [0, 5]]]],
  [[[8, [7, 3]], 1], 8],
  [[8, [8, [8, 2]]], [[5, 4], [1, [2, 6]]]],
  [[[[1, 1], [8, 6]], 5], 9],
  [[[[2, 4], [5, 7]], [[5, 8], [3, 1]]], 7],
  [[4, [[0, 1], 9]], [[3, 8], [4, 2]]],
  [3, 2],
  [[3, 4], [8, [[6, 5], [6, 6]]]],
  [[[[7, 0], [3, 8]], [[3, 3], [2, 6]]], [[8, 0], 9]]
]

permutations = for x <- numbers, y <- numbers, do: [x, y]

Enum.flat_map(permutations, fn [a, b] ->
  [AOC18.reduce_all([a, b]) |> AOC18.magnitude(), AOC18.reduce_all([b, a]) |> AOC18.magnitude()]
end)
|> Enum.max()
```
